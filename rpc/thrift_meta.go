/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rpc

import (
	"bytes"
	"context"
	"fmt"
	"reflect"

	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - AppID
//  - PartitionIndex
//  - ClientTimeout
//  - ClientPartitionHash
//  - IsBackupRequest
type ThriftRequestMetaV1 struct {
	AppID               *int32 `thrift:"app_id,1" db:"app_id" json:"app_id,omitempty"`
	PartitionIndex      *int32 `thrift:"partition_index,2" db:"partition_index" json:"partition_index,omitempty"`
	ClientTimeout       *int32 `thrift:"client_timeout,3" db:"client_timeout" json:"client_timeout,omitempty"`
	ClientPartitionHash *int64 `thrift:"client_partition_hash,4" db:"client_partition_hash" json:"client_partition_hash,omitempty"`
	IsBackupRequest     *bool  `thrift:"is_backup_request,5" db:"is_backup_request" json:"is_backup_request,omitempty"`
}

func NewThriftRequestMetaV1() *ThriftRequestMetaV1 {
	return &ThriftRequestMetaV1{}
}

var ThriftRequestMetaV1_AppID_DEFAULT int32

func (p *ThriftRequestMetaV1) GetAppID() int32 {
	if !p.IsSetAppID() {
		return ThriftRequestMetaV1_AppID_DEFAULT
	}
	return *p.AppID
}

var ThriftRequestMetaV1_PartitionIndex_DEFAULT int32

func (p *ThriftRequestMetaV1) GetPartitionIndex() int32 {
	if !p.IsSetPartitionIndex() {
		return ThriftRequestMetaV1_PartitionIndex_DEFAULT
	}
	return *p.PartitionIndex
}

var ThriftRequestMetaV1_ClientTimeout_DEFAULT int32

func (p *ThriftRequestMetaV1) GetClientTimeout() int32 {
	if !p.IsSetClientTimeout() {
		return ThriftRequestMetaV1_ClientTimeout_DEFAULT
	}
	return *p.ClientTimeout
}

var ThriftRequestMetaV1_ClientPartitionHash_DEFAULT int64

func (p *ThriftRequestMetaV1) GetClientPartitionHash() int64 {
	if !p.IsSetClientPartitionHash() {
		return ThriftRequestMetaV1_ClientPartitionHash_DEFAULT
	}
	return *p.ClientPartitionHash
}

var ThriftRequestMetaV1_IsBackupRequest_DEFAULT bool

func (p *ThriftRequestMetaV1) GetIsBackupRequest() bool {
	if !p.IsSetIsBackupRequest() {
		return ThriftRequestMetaV1_IsBackupRequest_DEFAULT
	}
	return *p.IsBackupRequest
}
func (p *ThriftRequestMetaV1) IsSetAppID() bool {
	return p.AppID != nil
}

func (p *ThriftRequestMetaV1) IsSetPartitionIndex() bool {
	return p.PartitionIndex != nil
}

func (p *ThriftRequestMetaV1) IsSetClientTimeout() bool {
	return p.ClientTimeout != nil
}

func (p *ThriftRequestMetaV1) IsSetClientPartitionHash() bool {
	return p.ClientPartitionHash != nil
}

func (p *ThriftRequestMetaV1) IsSetIsBackupRequest() bool {
	return p.IsBackupRequest != nil
}

func (p *ThriftRequestMetaV1) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ThriftRequestMetaV1) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppID = &v
	}
	return nil
}

func (p *ThriftRequestMetaV1) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PartitionIndex = &v
	}
	return nil
}

func (p *ThriftRequestMetaV1) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ClientTimeout = &v
	}
	return nil
}

func (p *ThriftRequestMetaV1) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ClientPartitionHash = &v
	}
	return nil
}

func (p *ThriftRequestMetaV1) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IsBackupRequest = &v
	}
	return nil
}

func (p *ThriftRequestMetaV1) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("thrift_request_meta_v1"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftRequestMetaV1) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppID() {
		if err := oprot.WriteFieldBegin("app_id", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_id: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.AppID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.app_id (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_id: ", p), err)
		}
	}
	return err
}

func (p *ThriftRequestMetaV1) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartitionIndex() {
		if err := oprot.WriteFieldBegin("partition_index", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:partition_index: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.PartitionIndex)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.partition_index (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:partition_index: ", p), err)
		}
	}
	return err
}

func (p *ThriftRequestMetaV1) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetClientTimeout() {
		if err := oprot.WriteFieldBegin("client_timeout", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:client_timeout: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ClientTimeout)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.client_timeout (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:client_timeout: ", p), err)
		}
	}
	return err
}

func (p *ThriftRequestMetaV1) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetClientPartitionHash() {
		if err := oprot.WriteFieldBegin("client_partition_hash", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:client_partition_hash: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ClientPartitionHash)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.client_partition_hash (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:client_partition_hash: ", p), err)
		}
	}
	return err
}

func (p *ThriftRequestMetaV1) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsBackupRequest() {
		if err := oprot.WriteFieldBegin("is_backup_request", thrift.BOOL, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:is_backup_request: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsBackupRequest)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.is_backup_request (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:is_backup_request: ", p), err)
		}
	}
	return err
}

func (p *ThriftRequestMetaV1) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftRequestMetaV1(%+v)", *p)
}
